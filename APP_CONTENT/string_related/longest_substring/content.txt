/**
 *
 * find the longest sub-array without repeat
 *
 * solution :
 *
 *    index   0 1 2 3 4 5 6 7 8
 *    item    T H I R T Y N I N
 *    search...
 *    round1  ------>|           "T" occurred twice , start from the next of first "T", which is "H"
 *    round2    |---------->|    "N" occurred twice , start from the next of first "N", which is "I"
 *    round3                |->   until you reached the end
 */

@Test
public void test1(){
    System.out.println(lengthOfLongestSubstring(getTestInput()));
}

public int lengthOfLongestSubstring(String s) {
    HashMap<Character,Integer> map=new HashMap();
    int start=0;
    int end=0;
    int length=s.length();
    int currentLongest=0;
    int maxLongest=0;

    while(end<length){
        char c=s.charAt(end);
        if(!map.containsKey(c)){
            map.put(c,end);
            end+=1;
            currentLongest+=1;
            if(currentLongest>maxLongest){
                maxLongest=currentLongest;
            }
        } else {
            int previousIndex=map.get(c);
            start=previousIndex+1;
            end=previousIndex+1;
            map.clear();
            if(currentLongest>maxLongest){
                maxLongest=currentLongest;
            }
            currentLongest=0;
        }
    }
    return maxLongest;
}