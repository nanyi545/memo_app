
/**
 *
 Evaluate the value of an arithmetic expression in Reverse Polish Notation. Valid operators are +, -, *, /. Each operand may be an integer or another expression. For example:
 ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
 ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
 */



public class RPNevaluator {


    @Test
    public void byStack(){
//        String[] tokens = new String[] { "2", "1", "+", "3", "*" };
        String[] tokens = new String[] { "4", "13", "5", "/", "+" };
        System.out.println(evalByStack(tokens));
    }


    /**
     *       method 1
     * @param expression
     * @return
     */
    public static int evalByStack(String[] expression){
        Stack<String> stack=new Stack();
        int value=0;
        String operators="+-*/";
        for (String tmp:expression){
            if (operators.contains(tmp)){
                int int2= Integer.valueOf(stack.pop());
                int int1= Integer.valueOf(stack.pop());
                switch(tmp){
                    case "+":
                        stack.push(String.valueOf(int1+int2));
                        break;
                    case "-":
                        stack.push(String.valueOf(int1-int2));
                        break;
                    case "*":
                        stack.push(String.valueOf(int1*int2));
                        break;
                    case "/":
                        stack.push(String.valueOf(int1/int2));
                        break;
                }
            } else{
                stack.push(tmp);
            }
        }
        return Integer.valueOf(stack.pop());
    }
    
}